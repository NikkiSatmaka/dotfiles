# Usage: indirect_expand PATH -> $PATH
indirect_expand() {
    env |sed -n "s/^$1=//p"
}

# Usage: pathremove /path/to/bin [PATH]
# Eg, to remove ~/bin from $PATH
#     pathremove ~/bin PATH
pathremove() {
    local IFS=':'
    local newpath
    local dir
    local var=${2:-PATH}
    # Bash has ${!var}, but this is not portable.
    for dir in `indirect_expand "$var"`; do
        IFS=''
        if [ "$dir" != "$1" ]; then
            newpath=$newpath:$dir
        fi
    done
    export $var=${newpath#:}
}

# Usage: pathprepend /path/to/bin [PATH]
# Eg, to prepend ~/bin to $PATH
#     pathprepend ~/bin PATH
pathprepend() {
    # if the path is already in the variable,
    # remove it so we can move it to the front
    pathremove "$1" "$2"
    #[ -d "${1}" ] || return
    local var="${2:-PATH}"
    local value=`indirect_expand "$var"`
    export ${var}="${1}${value:+:${value}}"
}

# Usage: pathappend /path/to/bin [PATH]
# Eg, to append ~/bin to $PATH
#     pathappend ~/bin PATH
pathappend() {
    pathremove "${1}" "${2}"
    #[ -d "${1}" ] || return
    local var=${2:-PATH}
    local value=`indirect_expand "$var"`
    export $var="${value:+${value}:}${1}"
}

# Usage: ssource filename
ssource() {
    if [ -r "$1" ]; then
        . "$1" 2>/dev/null || :
    fi
}

# Usage: pathappend only if dir exists
init_pathappend() {
    local _target_path="$1"
    if test -d "$_target_path"; then
        pathappend "$_target_path" "$2"
    fi
}

# Usage: pathprepend only if dir exists
init_pathprepend() {
    local _target_path="$1"
    if test -d "$_target_path"; then
        pathprepend "$_target_path" "$2"
    fi
}

# Define a function to conditionally evaluate shell initializations
# Eg, to initialize direnv to bash
# initialize_shell_tool "direnv" "$(direnv hook bash)"
initialize_shell_tool() {
    local tool_name="$1"
    local init_command="$2"

    if command -v "$tool_name" >/dev/null 2>&1; then
        eval "$init_command" 2>/dev/null || :
    fi
}

# Function to find and initialize brew
find_and_init_brew() {
    local _brew_prefixes="$HOME/.linuxbrew /home/linuxbrew/.linuxbrew /opt/homebrew"

    for prefix in $_brew_prefixes; do
        if test -x "$prefix/bin/brew"; then
            eval "$("$prefix/bin/brew" shellenv)"
            break
        fi
    done
}
